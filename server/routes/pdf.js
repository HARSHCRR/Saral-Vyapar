const express = require('express');
const { PDFDocument, rgb, StandardFonts } = require('pdf-lib');
const jwt = require('jsonwebtoken');
const Business = require('../models/Business');
const router = express.Router();

// Middleware to verify JWT token
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Access token required' });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: 'Invalid or expired token' });
    }
    req.user = user;
    next();
  });
};

// Generate GST registration form
router.post('/gst-form', authenticateToken, async (req, res) => {
  try {
    const business = await Business.findOne({ userId: req.user.userId });

    if (!business) {
      return res.status(404).json({ error: 'Business profile not found' });
    }

    // Create a new PDF document
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage([595.28, 841.89]); // A4 size
    const { width, height } = page.getSize();

    // Get the standard font
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

    // Title
    page.drawText('GST Registration Form', {
      x: 50,
      y: height - 50,
      size: 20,
      font: boldFont,
      color: rgb(0, 0, 0)
    });

    // Business Information
    let yPosition = height - 100;

    // Business Name
    page.drawText('Business Name:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.businessName, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    // Business Type
    page.drawText('Business Type:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.businessType, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    // Address
    page.drawText('Address:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.location.address, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    // City and State
    page.drawText('City/State:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(`${business.location.city}, ${business.location.state}`, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    // Pincode
    page.drawText('Pincode:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.location.pincode, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    // Contact Information
    page.drawText('Email:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.contactInfo.email, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    page.drawText('Phone:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.contactInfo.phone, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 50;

    // Footer
    page.drawText('Generated by Saral Vyapar SWS', {
      x: 50,
      y: 50,
      size: 10,
      font: font,
      color: rgb(0.5, 0.5, 0.5)
    });

    page.drawText(`Generated on: ${new Date().toLocaleDateString()}`, {
      x: 50,
      y: 35,
      size: 10,
      font: font,
      color: rgb(0.5, 0.5, 0.5)
    });

    // Serialize the PDF
    const pdfBytes = await pdfDoc.save();

    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename="gst-registration-form.pdf"');

    res.send(Buffer.from(pdfBytes));

  } catch (error) {
    console.error('PDF generation error:', error);
    res.status(500).json({ error: 'Failed to generate PDF' });
  }
});

// Generate MSME registration form
router.post('/msme-form', authenticateToken, async (req, res) => {
  try {
    const business = await Business.findOne({ userId: req.user.userId });

    if (!business) {
      return res.status(404).json({ error: 'Business profile not found' });
    }

    // Create a new PDF document
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage([595.28, 841.89]); // A4 size
    const { width, height } = page.getSize();

    // Get the standard font
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

    // Title
    page.drawText('MSME Udyam Registration Form', {
      x: 50,
      y: height - 50,
      size: 20,
      font: boldFont,
      color: rgb(0, 0, 0)
    });

    // Business Information
    let yPosition = height - 100;

    // Business Name
    page.drawText('Enterprise Name:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.businessName, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    // Business Type
    page.drawText('Type of Organization:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.businessType, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    // Industry
    page.drawText('Major Activity:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.industry, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    // Address
    page.drawText('Address:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.location.address, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    // City and State
    page.drawText('City/State:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(`${business.location.city}, ${business.location.state}`, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    // Pincode
    page.drawText('Pincode:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.location.pincode, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    // Contact Information
    page.drawText('Email:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.contactInfo.email, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 30;

    page.drawText('Mobile Number:', {
      x: 50,
      y: yPosition,
      size: 12,
      font: boldFont,
      color: rgb(0, 0, 0)
    });
    page.drawText(business.contactInfo.phone, {
      x: 200,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0)
    });

    yPosition -= 50;

    // Footer
    page.drawText('Generated by Saral Vyapar SWS', {
      x: 50,
      y: 50,
      size: 10,
      font: font,
      color: rgb(0.5, 0.5, 0.5)
    });

    page.drawText(`Generated on: ${new Date().toLocaleDateString()}`, {
      x: 50,
      y: 35,
      size: 10,
      font: font,
      color: rgb(0.5, 0.5, 0.5)
    });

    // Serialize the PDF
    const pdfBytes = await pdfDoc.save();

    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename="msme-registration-form.pdf"');

    res.send(Buffer.from(pdfBytes));

  } catch (error) {
    console.error('PDF generation error:', error);
    res.status(500).json({ error: 'Failed to generate PDF' });
  }
});

module.exports = router; 